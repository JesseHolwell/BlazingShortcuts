@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppState AppState
@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel model { get; set; }
}

<style>
    .content-sidebar .nav.flex-column {
        padding: 5px;
    }

    .content-sidebar .nav-item {
        color: #d7d7d7;
        border-radius: 4px;
        height: 2rem;
        display: flex;
        align-items: center;
        line-height: 2rem;
        background-color: rgba(255,255,255,0.1)
    }

        .content-sidebar .nav-item.active {
            background-color: rgba(255,255,255,0.25)
        }

    .key-group {
        border-radius: 4px;
        background-color: rgba(255,255,255,0.1);
        padding: 5px;
    }

    .content-sidebar {
        border-radius: 4px;
    }

    .content-main {
        display: flex;
        flex-direction: column;
    }

    .headerish {
        width: 100%;
    }
</style>

@if (!model.Scope.Any() || AppState.ShowInfo)
{
    if (model.Scope.Any())
    {
        <button @onclick="@(() => ToggleInfo(false))" class="btn btn-outline-primary">Hide</button>
    }

    <StartPanel />
}
else
{
    <div class="headerish">
        <button @onclick="@(() => Configure())" class="btn btn-outline-primary">Configure</button>
        <button @onclick="@(() => Save())" class="btn btn-outline-primary" disabled>Save</button>
        <button @onclick="@(() => Reset())" class="btn btn-outline-primary">Reset</button>
        <button @onclick="@(() => SortByName())" class="btn btn-outline-primary">Sort by name</button>
        <button @onclick="@(() => SortByBinding())" class="btn btn-outline-primary">Sort by keybind</button>
        <button @onclick="@(() => ShowAll())" class="btn btn-outline-primary">Show all</button>
        <button @onclick="@(() => HideAll())" class="btn btn-outline-primary">Hide all</button>
        <button @onclick="@(() => Fullscreen())" class="btn btn-outline-primary">Fullscreen</button>
        <button @onclick="@(() => ToggleInfo(true))" class="btn btn-outline-primary">Info</button>
    </div>

    <ShortcutList />
}

@code {

    public string key = "bindings";
    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }

    private async Task Initialize()
    {
        var cereal = await localStorage.GetItemAsync<string>(key);

        if (cereal != null)
        {
            Console.WriteLine("Eating cereal");

            //model.Output += "Generating list from session storage\n";
            //this.StateHasChanged();

            //await model.GenerateList(bytes);
            model.Scope = AppState.Deserialize(cereal);
            Console.WriteLine("Ate cereal");
            //this.StateHasChanged();

            Console.WriteLine("Cereal eaten successfully");
        }
        else
        {
            //model.Output += "no found file\n";
            this.StateHasChanged();
        }
    }

    public async Task Configure()
    {
        AppState.ToggleConfigure();
    }

    public async Task Save()
    {

    }

    public async Task Reset()
    {
        await Initialize();
    }

    public bool SortByNameAscending = true;
    public bool SortByBindingAscending = true;

    public async Task SortByName()
    {
        foreach (var Scope in model.Scope)
        {
            if (SortByNameAscending)
                Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.DisplayName).ToList();
            else
                Scope.Bindings = Scope.Bindings.OrderBy(x => x.DisplayName).ToList();
        }

        SortByNameAscending = !SortByNameAscending;
        SortByBindingAscending = false;

        this.StateHasChanged();
    }

    public async Task SortByBinding()
    {
        foreach (var Scope in model.Scope)
        {

            if (SortByBindingAscending)
                Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.Shortcut).ToList();
            else
                Scope.Bindings = Scope.Bindings.OrderBy(x => x.Shortcut).ToList();
        }

        SortByBindingAscending = !SortByBindingAscending;
        SortByNameAscending = false;

        this.StateHasChanged();
    }

    public async Task HideAll()
    {
        foreach (var Scope in model.Scope)
        {
            Scope.Visible = false;

            foreach (var Binding in Scope.Bindings)
                Binding.Visible = false;
        }
        this.StateHasChanged();
    }

    public async Task ShowAll()
    {
        foreach (var Scope in model.Scope)
        {
            Scope.Visible = true;

            foreach (var Binding in Scope.Bindings)
                Binding.Visible = true;
        }
        this.StateHasChanged();
    }

    public async Task Fullscreen()
    {
        AppState.ToggleFullscreen();
    }

    public async Task ToggleInfo(bool? toggle = null)
    {
        AppState.ToggleInfo(toggle);
    }

}
