@namespace Components
@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel model { get; set; }
}

<div class="key @Classes @(Key.IsPressed ? "pressed" : "") @(Key.IsAvailable ? "available" : "")" @onclick="@(() => KeyPress(Key))">
    @Key.Key
</div>

@code {

    [Parameter]
    public KeyboardKeyModel Key { get; set; }

    [Parameter]
    public string Classes { get; set; }

    public async Task KeyPress(KeyboardKeyModel key)
    {
        key.Press();

        if (key.Key == "Escape")
        {
            model.Shortcut.Reset();
            model.Keyboard.ResetAvailable();
            model.Keyboard.ResetPressed();
        }

        if (key.Key == "LCtrl")
            model.Shortcut.IsCtrlDown = !model.Shortcut.IsCtrlDown;
        else if (key.Key == "LAlt")
            model.Shortcut.IsAltDown = !model.Shortcut.IsAltDown;
        else if (key.Key == "LShift")
            model.Shortcut.IsShiftDown = !model.Shortcut.IsShiftDown;
        else
        {
            model.Shortcut.ShortcutKeys[model.Shortcut.current].Key = key.Key.ToUpper();

            model.Shortcut.currentState = !model.Shortcut.currentState;

            model.Shortcut.IsCtrlDown = false;
            model.Shortcut.IsAltDown = false;
            model.Shortcut.IsShiftDown = false;

        }

        await model.UpdateViewModel(model.Shortcut);
        this.StateHasChanged();
    }
}
