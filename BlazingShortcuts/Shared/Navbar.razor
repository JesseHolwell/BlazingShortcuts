@inject AppState AppState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@functions{
    [CascadingParameter(Name = "ViewModel")] protected VSShortcutsViewModel model { get; set; }
}

<div class="sidebar d-md-flex" style="justify-content:space-between">

    <div class="top-row pl-4 navbar navbar-dark">
        <a class="navbar-brand" href="">VS Shortcuts</a>

        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="d-inline">
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <div class="navbar-buttons">
                @if (model.Bindings.IsInitialized)
                {
                    <button @onclick="@(() => Configure())" class="btn btn-outline-primary">Configure</button>
                    <button @onclick="@(() => Save())" class="btn btn-outline-primary">Save</button>
                    <button @onclick="@(() => Reset())" class="btn btn-outline-primary">Reset</button>
                    <button @onclick="@(() => ShowAll())" class="btn btn-outline-primary">Show all</button>
                    <button @onclick="@(() => HideAll())" class="btn btn-outline-primary">Hide all</button>
                    <button @onclick="@(() => Fullscreen())" class="btn btn-outline-primary d-md-none">Fullscreen</button>
                    <button @onclick="@(() => ToggleInfo(true))" class="btn btn-outline-primary d-lg-none">Info</button>
                }
                <button @onclick="ToggleTheme" class="btn btn-outline-info">
                    @if (AppState.Theme)
                    {
                        <i class="fas fa-sun"></i>
                    }
                    else
                    {
                        <i class="fas fa-moon"></i>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public string themeKey = "theme";
    public string bindingsKey = "bindings";

    protected override async Task OnInitializedAsync()
    {
        var theme = await localStorage.GetItemAsync<bool>(themeKey);
        AppState.ToggleTheme(theme);
        await Initialize();
    }

    private async Task Initialize()
    {
        var cereal = await localStorage.GetItemAsync<string>(bindingsKey);

        if (cereal != null)
        {
            Console.WriteLine("Eating cereal");

            model.Bindings = Storage.Deserialize(cereal);

            Console.WriteLine("Ate cereal");

            AppState.SetDisplayState(DisplayState.EventsAndShortcuts);
        }
        else
        {
            this.StateHasChanged();
        }
    }

    public async Task Configure()
    {
        AppState.ToggleConfigure();
    }

    public async Task Save()
    {
        await localStorage.SetItemAsync(bindingsKey, Storage.Serialize(model.Bindings));
    }

    public async Task Reset()
    {
        await Initialize();
    }

    //public bool SortByNameAscending = true;
    //public bool SortByBindingAscending = true;

    //public async Task SortByName()
    //{
    //    foreach (var Scope in model.Bindings.Scope)
    //    {
    //        if (SortByNameAscending)
    //            Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.DisplayName).ToList();
    //        else
    //            Scope.Bindings = Scope.Bindings.OrderBy(x => x.DisplayName).ToList();
    //    }

    //    SortByNameAscending = !SortByNameAscending;
    //    SortByBindingAscending = false;

    //    this.StateHasChanged();
    //}

    //public async Task SortByBinding()
    //{
    //    foreach (var Scope in model.Bindings.Scope)
    //    {

    //        if (SortByBindingAscending)
    //            Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.ShortcutKeys.ToString()).ToList();
    //        else
    //            Scope.Bindings = Scope.Bindings.OrderBy(x => x.ShortcutKeys.ToString()).ToList();
    //    }

    //    SortByBindingAscending = !SortByBindingAscending;
    //    SortByNameAscending = false;

    //    this.StateHasChanged();
    //}

    public async Task HideAll()
    {
        foreach (var Scope in model.Bindings.Scope)
        {
            Scope.Visible = false;

            foreach (var Binding in Scope.Bindings)
                Binding.Visible = false;
        }
        this.StateHasChanged();
    }

    public async Task ShowAll()
    {
        foreach (var Scope in model.Bindings.Scope)
        {
            Scope.Visible = true;

            foreach (var Binding in Scope.Bindings)
                Binding.Visible = true;
        }
        this.StateHasChanged();
    }

    public async Task Fullscreen()
    {
        AppState.ToggleFullscreen();
    }

    public async Task ToggleInfo(bool? toggle = null)
    {
        AppState.ToggleInfo(toggle);
    }

    async Task ToggleTheme()
    {
        var theme = AppState.ToggleTheme();
        await localStorage.SetItemAsync(themeKey, theme);
    }

}
