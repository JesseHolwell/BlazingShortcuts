@inject AppState AppState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel model { get; set; }
}

<div class="sidebar d-flex" style="justify-content:space-between">

    <div class="top-row pl-4 navbar navbar-dark d-inline">
        @*<a class="navbar-brand" href="">BlazorApp1</a>*@
        <a class="navbar-brand" href="">VS Shortcuts</a>

        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="@NavMenuCssClass d-inline" @onclick="ToggleNavMenu">
        @*<ul class="nav flex-column">*@
        @if (model.Scope.Any())
        {
            <button @onclick="@(() => Configure())" class="btn btn-outline-primary">Configure</button>
            <button @onclick="@(() => Save())" class="btn btn-outline-primary">Save</button>
            <button @onclick="@(() => Reset())" class="btn btn-outline-primary">Reset</button>
            @*<button @onclick="@(() => SortByName())" class="btn btn-outline-primary">Sort by name</button>
                <button @onclick="@(() => SortByBinding())" class="btn btn-outline-primary">Sort by keybind</button>*@
            <button @onclick="@(() => ShowAll())" class="btn btn-outline-primary">Show all</button>
            <button @onclick="@(() => HideAll())" class="btn btn-outline-primary">Hide all</button>
            <button @onclick="@(() => Fullscreen())" class="btn btn-outline-primary">Fullscreen</button>
            <button @onclick="@(() => ToggleInfo(true))" class="btn btn-outline-primary">Info</button>
        }
        <button @onclick="ToggleTheme" class="btn btn-outline-info">
            @if (AppState.Theme)
            {
                <i class="fas fa-sun"></i>
            }
            else
            {
                <i class="fas fa-moon"></i>
            }
        </button>

        @*<li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="oi oi-plus" aria-hidden="true"></span> Counter
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="fetchdata">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                </NavLink>
            </li>*@
        @*</ul>*@
    </div>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}


@*<div class="top-row pl-4 navbar navbar-dark header-navbar">
        <a class="navbar-brand" href="">VS Shortcuts</a>

        <div>
                <button>Import</button>
                <button>Export</button>
            </div>

        <div>

        </div>
    </div>*@


@code {

    public string themeKey = "theme";
    public string bindingsKey = "bindings";

    protected override async Task OnInitializedAsync()
    {
        var theme = await localStorage.GetItemAsync<bool>(themeKey);
        AppState.ToggleTheme(theme);
        await Initialize();
    }

    private async Task Initialize()
    {
        var cereal = await localStorage.GetItemAsync<string>(bindingsKey);

        if (cereal != null)
        {
            Console.WriteLine("Eating cereal");

            //model.Output += "Generating list from session storage\n";
            //this.StateHasChanged();

            //await model.GenerateList(bytes);
            model.Scope = AppState.Deserialize(cereal);
            Console.WriteLine("Ate cereal");
            //this.StateHasChanged();

            Console.WriteLine("Cereal eaten successfully");
        }
        else
        {
            //model.Output += "no found file\n";
            this.StateHasChanged();
        }
    }

    public async Task Configure()
    {
        AppState.ToggleConfigure();
    }

    public async Task Save()
    {
        await localStorage.SetItemAsync(bindingsKey, AppState.Serialize(model.Scope));
    }

    public async Task Reset()
    {
        await Initialize();
    }

    public bool SortByNameAscending = true;
    public bool SortByBindingAscending = true;

    public async Task SortByName()
    {
        foreach (var Scope in model.Scope)
        {
            if (SortByNameAscending)
                Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.DisplayName).ToList();
            else
                Scope.Bindings = Scope.Bindings.OrderBy(x => x.DisplayName).ToList();
        }

        SortByNameAscending = !SortByNameAscending;
        SortByBindingAscending = false;

        this.StateHasChanged();
    }

    public async Task SortByBinding()
    {
        foreach (var Scope in model.Scope)
        {

            if (SortByBindingAscending)
                Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.ShortcutKeys.ToString()).ToList();
            else
                Scope.Bindings = Scope.Bindings.OrderBy(x => x.ShortcutKeys.ToString()).ToList();
        }

        SortByBindingAscending = !SortByBindingAscending;
        SortByNameAscending = false;

        this.StateHasChanged();
    }

    public async Task HideAll()
    {
        foreach (var Scope in model.Scope)
        {
            Scope.Visible = false;

            foreach (var Binding in Scope.Bindings)
                Binding.Visible = false;
        }
        this.StateHasChanged();
    }

    public async Task ShowAll()
    {
        foreach (var Scope in model.Scope)
        {
            Scope.Visible = true;

            foreach (var Binding in Scope.Bindings)
                Binding.Visible = true;
        }
        this.StateHasChanged();
    }

    public async Task Fullscreen()
    {
        AppState.ToggleFullscreen();
    }

    public async Task ToggleInfo(bool? toggle = null)
    {
        if (model.Scope.Any())
            AppState.ToggleInfo(toggle);
    }

    async Task ToggleTheme()
    {
        var theme = AppState.ToggleTheme();
        await localStorage.SetItemAsync(themeKey, theme);
    }

}
