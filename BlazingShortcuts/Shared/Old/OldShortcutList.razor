@namespace BlazingShortcuts
@inject AppState AppState
@functions{
    [CascadingParameter(Name = "ViewModel")] protected BlazingShortcuts.Old.OldBindingsViewModel model { get; set; }
}


<div class="content px-4">
    <div class="content-sidebar">
        <div>
            <ul class="nav flex-column">
                @foreach (var scope in model.Scope)
                {
                    if (scope.Visible || AppState.Configure)
                    {
                <li class="nav-item px-1 m-1 @(scope.Current ? "active" : "")" @onclick="@(() => Display(scope))">
                    <span>@scope.Name</span>
                    @if (AppState.Configure)
                            {
                                if (scope.Visible)
                                {
                    <button @onclick="@(() => Toggle(scope))" class="btn btn-outline-danger">hide</button>
                                }
                                else
                                {
                    <button @onclick="@(() => Toggle(scope))" class="btn btn-outline-primary">show</button>
                                }
                            }
                </li>
                    }
                }
            </ul>
        </div>
    </div>

    <div class="content-main">

        @if (model != null)
        {
        @*<div class="row">*@
        <div style="flex:1">

            @foreach (var scope in model.Scope)
                {
            @*<div class="col-12 col-sm-6 col-md-4 @(key.visible ? "" : "no-print")">*@
            <div class="@(scope.Current ? "" : "d-none")" style="height:100%">
                @*<div class="stone-head">*@
                @*@if (bindings.bindings.IndexOf(key) != 0)
                    {
                        <button @onclick="@(() => MoveUp(key))" class="btn btn-outline-secondary">Up</button>
                    }
                    @if (bindings.bindings.IndexOf(key) != bindings.bindings.Count() - 1)
                    {
                        <button @onclick="@(() => MoveDown(key))" class="btn btn-outline-secondary">Down</button>
                    }
                    <button @onclick="@(() => Toggle(key))" class="btn btn-outline-primary">Toggle</button>*@
                @*</div>
                    <div class="stone-body">*@
                <div class="key-group ml-3 px-2" style="height:100%">
                    @*<div>filter by name</div>
                        <div>filter by keybind</div>*@


                    <h3 class="shortcut-key @(scope.Visible ? "key-visible" : "key-hidden")" data-toggle="collapse" data-target="#@scope.Name.Replace(' ', '-')">@scope.Name</h3>
                    @if (scope.Current)
                            {
                    <div id="@scope.Name.Replace(' ', '-')" class="shortcuts row">
                        @*<dl id="@key.Replace(' ', '-')" class="collapse shortcuts">*@
                        @foreach (var binding in scope.Bindings)
                                    {
                        @if (binding.Display || AppState.Configure)
                                        {
                        <div class="col-6">
                            @binding.DisplayName
                            @if (AppState.Configure)
                                                {
                                                    if (binding.Display)
                                                    {
                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => ToggleDisplay(binding))">hide</button>
                                                    }
                                                    else
                                                    {
                            <button class="btn btn-sm btn-outline-primary" @onclick="@(() => ToggleDisplay(binding))">show</button>
                                                    }
                                                }
                        </div>
                        <div class="col-6">
                            @*@foreach (string shortcut in binding.Shortcuts)
                                {*@
                            <div class="shortcut">@binding.Shortcut</div>
                            @*}*@
                        </div>
                                        }

                                    }
                    </div>
                            }
                </div>
                @*</div>*@
            </div>
                }
        </div>
        }

    </div>
</div>

@code {

    public async Task Toggle(Old.Scope scope)
    {
        scope.Visible = !scope.Visible;
        model.Scope = model.Scope.OrderByDescending(x => x.Visible).ThenBy(x => x.Name).ToList();
        this.StateHasChanged();
    }

    public async Task Display(Old.Scope scope)
    {
        model.Scope.ForEach(x => x.Current = false);
        scope.Current = true;
        this.StateHasChanged();
    }

    public async Task ToggleDisplay(Old.Binding binding)
    {
        binding.Display = !binding.Display;
        this.StateHasChanged();
    }

}