@inject Blazored.LocalStorage.ILocalStorageService localStorage
@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel model { get; set; }
}

    <style>
        .content-sidebar .nav.flex-column {
            padding: 5px;
        }

        .content-sidebar .nav-item {
            color: #d7d7d7;
            border-radius: 4px;
            height: 2rem;
            display: flex;
            align-items: center;
            line-height: 2rem;
            background-color: rgba(255,255,255,0.1)
        }

            .content-sidebar .nav-item.active {
                background-color: rgba(255,255,255,0.25)
            }

        .key-group {
            border-radius: 4px;
            background-color: rgba(255,255,255,0.1);
            padding: 5px;
        }

        .content-sidebar {
            border-radius: 4px;
        }

        .content-main {
            display: flex;
            flex-direction: column;
        }

        .headerish {
            width: 100%;
        }
    </style>

@if (!model.Scope.Any())
{
    <Info />
}
else
{
    <div class="headerish">
        <button @onclick="@(() => Configure())" class="btn btn-outline-primary">Configure</button>
        <button @onclick="@(() => Save())" class="btn btn-outline-primary" disabled>Save</button>
        <button @onclick="@(() => Reset())" class="btn btn-outline-primary">Reset</button>
        <button @onclick="@(() => SortByName())" class="btn btn-outline-primary">Sort by name</button>
        <button @onclick="@(() => SortByBinding())" class="btn btn-outline-primary">Sort by keybind</button>
        <button @onclick="@(() => ShowAll())" class="btn btn-outline-primary">Show all</button>
        <button @onclick="@(() => HideAll())" class="btn btn-outline-primary">Hide all</button>
    </div>

    <div class="content px-4">
        <div class="content-sidebar">
            <div>
                <ul class="nav flex-column">
                    @foreach (var scope in model.Scope)
                    {
                        if (scope.Visible || configure)
                        {
                            <li class="nav-item px-1 m-1 @(scope.Current ? "active" : "")" @onclick="@(() => Display(scope))">
                                <span>@scope.Name</span>
                                @if (configure)
                                {
                                    if (scope.Visible)
                                    {
                                        <button @onclick="@(() => Toggle(scope))" class="btn btn-outline-danger">hide</button>
                                    }
                                    else
                                    {
                                        <button @onclick="@(() => Toggle(scope))" class="btn btn-outline-primary">show</button>
                                    }
                                }
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        <div class="content-main">

            @if (model != null)
            {
                @*<div class="row">*@
                <div style="flex:1">

                    @foreach (var scope in model.Scope)
                    {
                        @*<div class="col-12 col-sm-6 col-md-4 @(key.visible ? "" : "no-print")">*@
                        <div class="@(scope.Current ? "" : "d-none")" style="height:100%">
                            @*<div class="stone-head">*@
                            @*@if (bindings.bindings.IndexOf(key) != 0)
                                {
                                    <button @onclick="@(() => MoveUp(key))" class="btn btn-outline-secondary">Up</button>
                                }
                                @if (bindings.bindings.IndexOf(key) != bindings.bindings.Count() - 1)
                                {
                                    <button @onclick="@(() => MoveDown(key))" class="btn btn-outline-secondary">Down</button>
                                }
                                <button @onclick="@(() => Toggle(key))" class="btn btn-outline-primary">Toggle</button>*@
                            @*</div>
                                <div class="stone-body">*@
                            <div class="key-group ml-3 px-2" style="height:100%">
                                @*<div>filter by name</div>
                                    <div>filter by keybind</div>*@


                                <h3 class="shortcut-key @(scope.Visible ? "key-visible" : "key-hidden")" data-toggle="collapse" data-target="#@scope.Name.Replace(' ', '-')">@scope.Name</h3>
                                @if (scope.Current)
                                {
                                    <div id="@scope.Name.Replace(' ', '-')" class="shortcuts row">
                                        @*<dl id="@key.Replace(' ', '-')" class="collapse shortcuts">*@
                                        @foreach (var binding in scope.Bindings)
                                        {
                                            @if (binding.Display || configure)
                                            {
                                                <div class="col-6">
                                                    @binding.DisplayName
                                                    @if (configure)
                                                    {
                                                        if (binding.Display)
                                                        {
                                                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => ToggleDisplay(binding))">hide</button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-primary" @onclick="@(() => ToggleDisplay(binding))">show</button>
                                                        }
                                                    }
                                                </div>
                                                <div class="col-6">
                                                    @*@foreach (string shortcut in binding.Shortcuts)
                                                        {*@
                                                    <div class="shortcut">@binding.Shortcut</div>
                                                    @*}*@
                                                </div>
                                            }

                                        }
                                    </div>
                                }
                            </div>
                            @*</div>*@
                        </div>
                    }
                </div>
            }

        </div>
    </div>
}

@code {

    public string key = "bindings";
    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }

    private async Task Initialize()
    {
        var bytes = await localStorage.GetItemAsync<byte[]>(key);

        if (bytes != null)
        {
            model.Output += "Generating list from session storage\n";
            this.StateHasChanged();

            await model.GenerateList(bytes);
            this.StateHasChanged();
        }
        else
        {
            model.Output += "no found file\n";
            this.StateHasChanged();
        }
    }

    public bool configure = true;
    public async Task Configure()
    {
        configure = !configure;
        this.StateHasChanged();
    }

    public async Task Save()
    {

    }

    public async Task Reset()
    {
        await Initialize();
    }

    public bool SortByNameAscending = true;
    public bool SortByBindingAscending = true;

    public async Task SortByName()
    {
        foreach (var Scope in model.Scope)
        {
            if (SortByNameAscending)
                Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.DisplayName).ToList();
            else
                Scope.Bindings = Scope.Bindings.OrderBy(x => x.DisplayName).ToList();
        }

        SortByNameAscending = !SortByNameAscending;
        SortByBindingAscending = false;

        this.StateHasChanged();
    }

    public async Task SortByBinding()
    {
        foreach (var Scope in model.Scope)
        {

            if (SortByBindingAscending)
                Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.Shortcut).ToList();
            else
                Scope.Bindings = Scope.Bindings.OrderBy(x => x.Shortcut).ToList();
        }

        SortByBindingAscending = !SortByBindingAscending;
        SortByNameAscending = false;

        this.StateHasChanged();
    }

    public async Task Toggle(Scope scope)
    {
        scope.Visible = !scope.Visible;
        model.Scope = model.Scope.OrderByDescending(x => x.Visible).ThenBy(x => x.Name).ToList();
        this.StateHasChanged();
    }

    public async Task Display(Scope scope)
    {
        model.Scope.ForEach(x => x.Current = false);
        scope.Current = true;
        this.StateHasChanged();
    }

    public async Task ToggleDisplay(Binding binding)
    {
        binding.Display = !binding.Display;
        this.StateHasChanged();
    }

    public async Task HideAll()
    {
        foreach (var Scope in model.Scope)
        {
            Scope.Visible = false;

            foreach (var Binding in Scope.Bindings)
                Binding.Display = false;
        }
        this.StateHasChanged();
    }

    public async Task ShowAll()
    {
        foreach (var Scope in model.Scope)
        {
            Scope.Visible = true;

            foreach (var Binding in Scope.Bindings)
                Binding.Display = true;
        }
        this.StateHasChanged();
    }

}
