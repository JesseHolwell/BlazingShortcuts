@inject AppState AppState
@functions{
    [CascadingParameter(Name = "ViewModel")] protected VSShortcutsViewModel model { get; set; }
}

<div class="text-center">
    <div>
        @if (!AppState.Searching)
        {
            <h2 class="d-none d-md-block">Click here and press some keys</h2>
            <h2 class="d-block d-md-none">Press some keys</h2>
        }
        else
        {
            <h2>@(model.Shortcut.ToString())</h2>
        }
    </div>
    <div class="d-none d-md-block">

        <div class="input-group mb-3">
            <input type="text" class="form-control col-4 offset-4" @onkeydown="@(e => KeyDown(e))" @onkeyup="@(e => KeyUp(e))" @onkeypress:preventDefault @onkeydown:preventDefault @onkeyup:preventDefault value="@(model.Shortcut.ToString())">
            <div class="input-group-append">
                <button @onclick="@(() => ClearKeys())" class="btn btn-outline-danger" type="button">Clear</button>
            </div>
        </div>

    </div>
</div>


@code {

    //public bool isCtrlDown = false;
    //public bool isShiftDown = false;
    //public bool isAltDown = false;

    //public Keys keys = new Keys();
    //public Keys keys2 = new Keys();
    //public Shortcut shortcut = new Shortcut();

    protected override async Task OnInitializedAsync()
    {
        //keysCurrent = 0;
        model.Keyboard.ResetAvailable();
        model.Keyboard.ResetPressed();
    }

    public async Task KeyDown(KeyboardEventArgs args)
    {
        Console.WriteLine($"KeyDown - {args.Key}");

        if (args.Repeat || args.Key.ToLower() == "escape")
            return;

        if (model.Shortcut.IsFull)
            model.Shortcut.Reset();

        //manage modifier keys
        //if (args.CtrlKey || args.AltKey || args.ShiftKey)
        //{
        if (args.CtrlKey)
        {
            model.Shortcut.ShortcutKeys[model.Shortcut.current].Control = true;
            model.Shortcut.IsCtrlDown = !model.Shortcut.IsCtrlDown;
        }
        else if (args.AltKey)
        {
            model.Shortcut.ShortcutKeys[model.Shortcut.current].Alt = true;
            model.Shortcut.IsAltDown = !model.Shortcut.IsAltDown;
        }
        else if (args.ShiftKey)
        {
            model.Shortcut.ShortcutKeys[model.Shortcut.current].Shift = true;
            model.Shortcut.IsShiftDown = !model.Shortcut.IsShiftDown;
        }
        //}

        if (args.Key != "Control" && args.Key != "Shift" && args.Key != "Alt")
        {
            model.Shortcut.ShortcutKeys[model.Shortcut.current].Key = args.Key.ToUpper();

            model.Shortcut.currentState = !model.Shortcut.currentState;

            model.Shortcut.IsCtrlDown = false;
            model.Shortcut.IsAltDown = false;
            model.Shortcut.IsShiftDown = false;

            //model.Keyboard.ResetPressed();
        }

        await model.UpdateViewModel(model.Shortcut);

        var keyEnum = model.GetKeyFromString(args.Key);
        if (keyEnum.HasValue)
            model.Keyboard.Keys[keyEnum.Value].IsPressed = true;

        AppState.IsSearching(true);

        this.StateHasChanged();
    }

    public async Task KeyUp(KeyboardEventArgs args)
    {
        Console.WriteLine("Key:\t" + args.Key);

        if (args.Key.ToLower() == "escape")
        {
            await ClearKeys();
            return;
        }
    }

    private async Task ClearKeys()
    {
        //keys = new Keys();
        //shortcut = new Shortcut();

        //isCtrlDown = false;
        //isAltDown = false;
        //isShiftDown = false;

        model.Shortcut.currentState = false;

        model.Shortcut.Reset();
        model.Keyboard.ResetAvailable();
        model.Keyboard.ResetPressed();

        //await UpdateViewModel(model.Shortcut);
        AppState.IsSearching(false);
        await model.UpdateViewModel(model.Shortcut);
        //AppState.IsSearching(!string.IsNullOrEmpty(model.Shortcut.ToString()));


        this.StateHasChanged();

    }

}
