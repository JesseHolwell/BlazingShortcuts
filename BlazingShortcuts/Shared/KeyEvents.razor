@inject AppState AppState
@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel model { get; set; }
}

<div class="text-center">
    <div>
        @if (!AppState.Searching || string.IsNullOrEmpty(chord) && string.IsNullOrEmpty(keybind))
        {
            <h2>Click here and press some keys</h2>
        }
        @*<h2>Ctrl + E, Ctrl + D</h2>*@
        @*<h2>@chord@keybind</h2>*@
        <h2>@shortcut.ToString()</h2>
    </div>
    <div>
        <input @onkeydown="@(e => KeyDown(e))" @onkeyup="@(e => KeyUp(e))" @onkeypress:preventDefault @onkeydown:preventDefault @onkeyup:preventDefault value="@shortcut.ToString()" />
        <button @onclick="@(() => ClearKeys())" class="btn btn-outline-danger">Clear</button>
    </div>
</div>


@code {

    public bool isCtrlDown = false;
    public bool isShiftDown = false;
    public bool isAltDown = false;

    public string keybind;
    public string chord;

    public bool isChord;
    public bool directMatch;

    public bool currentState;
    public int current => Convert.ToInt32(currentState);
    public Keys keys = new Keys();
    public Keys keys2 = new Keys();
    public Shortcut shortcut = new Shortcut();

    protected override async Task OnInitializedAsync()
    {
        shortcut.ShortcutKeys.Add(keys);
        shortcut.ShortcutKeys.Add(keys2);
        //keysCurrent = 0;
    }

    public async Task KeyDown(KeyboardEventArgs args)
    {
        if (args.Repeat || args.Key == "escape")
            return;

        //if (!shortcut.ShortcutKeys.Contains(keys))
        //    shortcut.ShortcutKeys.Add(keys);

        //if its a new shortcut
        //if (!isCtrlDown && !isAltDown && !isShiftDown && !string.IsNullOrEmpty(chord))
        //{
        //if (shortcut.ShortcutKeys.Count() >= 2)
        //{
        //    shortcut = new Shortcut();
        //    keys = new Keys();
        //}
        //if (isChord)
        //if (chord.Contains(","))
        //{
        //    chord = string.Empty;
        //    //isChord = false;
        //}
        //}

        //manage modifier keys
        if (args.CtrlKey || args.AltKey || args.ShiftKey)
        {
            if (args.CtrlKey)
            {
                shortcut.ShortcutKeys[current].Control = true;
                isCtrlDown = !isCtrlDown;
                //keybind += "Ctrl + ";
            }
            else if (args.AltKey)
            {
                shortcut.ShortcutKeys[current].Alt = true;
                isAltDown = !isAltDown;
                //keybind += "Alt + ";
            }
            else if (args.ShiftKey)
            {
                shortcut.ShortcutKeys[current].Shift = true;
                isShiftDown = !isShiftDown;
                //keybind += "Shift + ";
            }
        }

        //keys.Control = isCtrlDown;
        //keys.Alt = isAltDown;
        //keys.Shift = isShiftDown;

        if (args.Key != "Control" && args.Key != "Shift" && args.Key != "Alt")
        {
            //keybind += args.Key.ToUpper();
            shortcut.ShortcutKeys[current].Key = args.Key.ToUpper();

            currentState = !currentState;

        }

        await UpdateViewModel(shortcut);

        this.StateHasChanged();
    }

    public async Task KeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "escape")
        {
            await ClearKeys();
            return;
        }

        //manage modifier keys
        //if (args.Key == "Control")
        //    isCtrlDown = false;
        //if (args.Key == "Alt")
        //    isAltDown = false;
        //if (args.Key == "Shift")
        //    isShiftDown = false;
        else
        //skip this step for modifier key presses
        //if (args.Key != "Control" && args.Key != "Alt" && args.Key != "Shift")
        {
            //isCtrlDown = isAltDown = isShiftDown = false;
            ////chord += (args.CtrlKey ? "Ctrl + " : "") + (args.AltKey ? "Alt + " : "") + (args.ShiftKey ? "Shift + " : "") + args.Key.ToUpper();
            //chord += (string.IsNullOrEmpty(chord) ? "" : ", ") + keybind;
            //keybind = string.Empty;

            //keys = new Keys();
        }

        //keys.Control = isCtrlDown;
        //keys.Alt = isAltDown;
        //keys.Shift = isShiftDown;

        //await UpdateViewModel(chord);
        //this.StateHasChanged();

    }

    private async Task ClearKeys()
    {
        keys = new Keys();
        shortcut = new Shortcut();

        directMatch = false;
        isCtrlDown = false;
        isAltDown = false;
        isShiftDown = false;

        keybind = string.Empty;
        chord = string.Empty;

        currentState = false;

        await UpdateViewModel(shortcut);
        this.StateHasChanged();

    }

    private async Task UpdateViewModel(Shortcut shortcut)
    {
        AppState.IsSearching(!string.IsNullOrEmpty(shortcut.ToString()));

        foreach (var v in model.Scope.SelectMany(x => x.Bindings))
        {
            v.IsMatch = (v.ShortcutKeys.ToString().StartsWith(shortcut.ToString()));

            //if (v.ShortcutKeys.ToString() == chord)
            //    directMatch = true;

            Console.WriteLine($"{v.IsMatch}:\t{v.ShortcutKeys.ToString()}\t{shortcut.ToString()}");
        }
    }

}
