@inject IFileReaderService fileReaderService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.IO;

@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel bindings { get; set; }
}

<h1>File Upload</h1>

<div class="@DropClass"
     @ref=dropTargetElement
     @ondrop=OnDrop
     @ondragenter=OnDragEnter
     @ondragleave=OnDragLeave>
    Drop Files here.
    @foreach (var fileInfo in FileList)
    {
        <br />@fileInfo.Name
    }
</div>

<br />
<button @onclick="ReadFile" class="btn btn-primary">Read file</button>
@*<button @onclick="ClearFile" class="btn btn-primary">Clear</button>*@
@*<button class="btn btn-danger">Print</button>
<button class="btn btn-danger">Save</button>*@
<button class="btn btn-danger">Reset</button>

@code {

    public string key = "bindings";

    ElementReference dropTargetElement;
    IFileReaderRef dropReference;
    bool Additive { get; set; }

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _dropClasses = new List<string>() { dropTargetClass };

    string DropClass => string.Join(" ", _dropClasses);
    List<IFileInfo> FileList { get; } = new List<IFileInfo>();

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            dropReference = fileReaderService.CreateReference(dropTargetElement);
            await dropReference.RegisterDropEventsAsync();
        }
    }

    public async Task OnAdditiveChange(ChangeEventArgs e)
    {
        Additive = (bool)e.Value;
        await dropReference.UnregisterDropEventsAsync();
        await dropReference.RegisterDropEventsAsync(Additive);
    }

    public async Task ClearFile()
    {
        await dropReference.ClearValue();
        await this.RefreshFileList();
    }

    public void OnDragEnter(EventArgs e)
    {
        _dropClasses.Add(dropTargetDragClass);
    }

    public void OnDragLeave(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnDrop(EventArgs e)
    {
        bindings.Output += "Dropped a file.";
        _dropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshFileList();
    }

    private async Task RefreshFileList()
    {
        this.FileList.Clear();
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            this.FileList.Add(fileInfo);
        }
        this.StateHasChanged();
    }

    public async Task ReadFile()
    {
        bindings.Output = string.Empty;
        this.StateHasChanged();
        var nl = Environment.NewLine;
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            bindings.Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{nl}";
            bindings.Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{nl}";
            bindings.Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{nl}";
            bindings.Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
            this.StateHasChanged();

            using (var fs = await file.OpenReadAsync())
            {
                var bytes = await StreamToByteArray(fs);
                bindings.Output += $"Saving file in session...\n";
                await localStorage.SetItemAsync(key, bytes);

                bindings.Output += $"Reading file...\n";

                this.StateHasChanged();

                bindings.GenerateList(bytes);
            }

            this.StateHasChanged();
        }

    }

    public async static Task<byte[]> StreamToByteArray(Stream input)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            await input.CopyToAsync(ms);
            return ms.ToArray();
        }
    }
}
