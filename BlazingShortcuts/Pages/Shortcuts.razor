@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/shortcuts"

@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel bindings { get; set; }
}

<div class="content-sidebar">
    <div>
        <ul class="nav flex-column">
            @foreach (var v in bindings.bindings)
            {
                <li class="nav-item px-1 m-1 @(v.visible ? "active" : "")" @onclick="@(() => Toggle(v))">
                    <span>@v.name</span>
                    @*<button @onclick="@(() => Toggle(v))" class="btn btn-outline-primary">Toggle</button>*@
                </li>
            }
        </ul>
    </div>
</div>

<style>
    .content-sidebar .nav.flex-column {
        padding: 5px;
    }

    .content-sidebar .nav-item {
        color: #d7d7d7;
        border-radius: 4px;
        height: 2rem;
        display: flex;
        align-items: center;
        line-height: 2rem;
        background-color: rgba(255,255,255,0.1)
    }

        .content-sidebar .nav-item.active {
            background-color: rgba(255,255,255,0.25)
        }

    .key-group {
        border-radius: 4px;
        background-color: rgba(255,255,255,0.1);
        padding:5px;
    }

    .content-sidebar {
        border-radius: 4px;
    }

    .content-main {
        display: flex;
        flex-direction: column;
    }
</style>

<div class="content-main">

    @if (bindings != null)
    {
        @*<div class="row">*@
        <div style="flex:1">

            @foreach (var key in bindings.bindings)
            {
                @*<div class="col-12 col-sm-6 col-md-4 @(key.visible ? "" : "no-print")">*@
                <div class="@(key.visible ? "" : "d-none")" style="height:100%">
                    @*<div class="stone-head">*@
                    @*@if (bindings.bindings.IndexOf(key) != 0)
                        {
                            <button @onclick="@(() => MoveUp(key))" class="btn btn-outline-secondary">Up</button>
                        }
                        @if (bindings.bindings.IndexOf(key) != bindings.bindings.Count() - 1)
                        {
                            <button @onclick="@(() => MoveDown(key))" class="btn btn-outline-secondary">Down</button>
                        }
                        <button @onclick="@(() => Toggle(key))" class="btn btn-outline-primary">Toggle</button>*@
                    @*</div>
                        <div class="stone-body">*@
                    <div class="key-group ml-3 px-2" style="height:100%">
                        <h3 class="shortcut-key @(key.visible ? "key-visible" : "key-hidden")" data-toggle="collapse" data-target="#@key.name.Replace(' ', '-')">@key.name</h3>
                        @if (key.visible)
                        {
                            <div id="@key.name.Replace(' ', '-')" class="shortcuts row">
                                @*<dl id="@key.Replace(' ', '-')" class="collapse shortcuts">*@
                                @foreach (Binding binding in key.bindings)
                                {
                                    @if (binding.Display)
                                    {
                                        <div class="col-6">
                                            @binding.DisplayName
                                            @*<button class="btn btn-sm btn-outline-danger">X</button>*@
                                        </div>
                                        <div class="col-6">
                                            @foreach (string shortcut in binding.Shortcuts)
                                            {
                                                <div class="shortcut">@shortcut</div>
                                            }
                                        </div>
                                    }

                                    @*@onclick= "@(() => Remove(key))"*@
                                }
                            </div>
                        }
                    </div>
                    @*</div>*@
                </div>
            }
        </div>
    }

</div>

@code {

    public string key = "bindings";
    protected override async Task OnInitializedAsync()
    {

        var bytes = await localStorage.GetItemAsync<byte[]>(key);

        if (bytes != null)
        {
            bindings.Output += "Generating list from session storage\n";
            this.StateHasChanged();

            await bindings.GenerateList(bytes);
            this.StateHasChanged();
        }
        else
        {
            bindings.Output += "no found file\n";
            this.StateHasChanged();
        }
    }

    public async Task MoveUp(KeyGroup key)
    {
        var oldIndex = bindings.bindings.IndexOf(key);

        bindings.bindings.RemoveAt(oldIndex);

        // the actual index could have shifted due to the removal

        bindings.bindings.Insert(--oldIndex, key);

        this.StateHasChanged();
    }

    public async Task MoveDown(KeyGroup key)
    {
        var oldIndex = bindings.bindings.IndexOf(key);

        bindings.bindings.RemoveAt(oldIndex);

        // the actual index could have shifted due to the removal

        bindings.bindings.Insert(++oldIndex, key);

        this.StateHasChanged();
    }

    public async Task Toggle(KeyGroup key)
    {
        bindings.bindings.ForEach(x => x.visible = false);
        key.visible = true;
        this.StateHasChanged();
    }

}
