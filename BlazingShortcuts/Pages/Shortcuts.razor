@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/shortcuts"

@functions{
    [CascadingParameter(Name = "ViewModel")] protected BindingsViewModel model { get; set; }
}

    <div>
        <button @onclick="@(() => Configure())" class="btn btn-outline-primary">Configure</button>
        <button class="btn btn-outline-primary">Save</button>
        <button class="btn btn-outline-primary">Reset</button>
    </div>

<div class="content-sidebar">
    <div>
        <ul class="nav flex-column">
            @foreach (var scope in model.Scope)
            {
                <li class="nav-item px-1 m-1 @(scope.Visible ? "active" : "")" @onclick="@(() => Toggle(scope))">
                    <span>@scope.Name</span>
                    @if (configure)
                    {<button @onclick="@(() => Toggle(scope))" class="btn btn-outline-primary">Toggle</button>}
                </li>
            }
        </ul>
    </div>
</div>

<style>
    .content-sidebar .nav.flex-column {
        padding: 5px;
    }

    .content-sidebar .nav-item {
        color: #d7d7d7;
        border-radius: 4px;
        height: 2rem;
        display: flex;
        align-items: center;
        line-height: 2rem;
        background-color: rgba(255,255,255,0.1)
    }

        .content-sidebar .nav-item.active {
            background-color: rgba(255,255,255,0.25)
        }

    .key-group {
        border-radius: 4px;
        background-color: rgba(255,255,255,0.1);
        padding: 5px;
    }

    .content-sidebar {
        border-radius: 4px;
    }

    .content-main {
        display: flex;
        flex-direction: column;
    }
</style>

<div class="content-main">

    @if (model != null)
    {
        @*<div class="row">*@
        <div style="flex:1">

            @foreach (var scope in model.Scope)
            {
                @*<div class="col-12 col-sm-6 col-md-4 @(key.visible ? "" : "no-print")">*@
                <div class="@(scope.Visible ? "" : "d-none")" style="height:100%">
                    @*<div class="stone-head">*@
                    @*@if (bindings.bindings.IndexOf(key) != 0)
                        {
                            <button @onclick="@(() => MoveUp(key))" class="btn btn-outline-secondary">Up</button>
                        }
                        @if (bindings.bindings.IndexOf(key) != bindings.bindings.Count() - 1)
                        {
                            <button @onclick="@(() => MoveDown(key))" class="btn btn-outline-secondary">Down</button>
                        }
                        <button @onclick="@(() => Toggle(key))" class="btn btn-outline-primary">Toggle</button>*@
                    @*</div>
                        <div class="stone-body">*@
                    <div class="key-group ml-3 px-2" style="height:100%">
                        @*<div>filter by name</div>
                        <div>filter by keybind</div>*@
                        <button @onclick="@(() => SortByName(scope))" class="btn btn-outline-primary">Sort by name</button>
                        <button @onclick="@(() => SortByBinding(scope))" class="btn btn-outline-primary">Sort by keybind</button>

                        <h3 class="shortcut-key @(scope.Visible ? "key-visible" : "key-hidden")" data-toggle="collapse" data-target="#@scope.Name.Replace(' ', '-')">@scope.Name</h3>
                        @if (scope.Visible)
                        {
                            <div id="@scope.Name.Replace(' ', '-')" class="shortcuts row">
                                @*<dl id="@key.Replace(' ', '-')" class="collapse shortcuts">*@
                                @foreach (var binding in scope.Bindings)
                                {
                                    @if (binding.Display)
                                    {
                                        <div class="col-6">
                                            @binding.DisplayName
                                            @*<button class="btn btn-sm btn-outline-danger">X</button>*@
                                        </div>
                                        <div class="col-6">
                                            @*@foreach (string shortcut in binding.Shortcuts)
                                            {*@
                                                <div class="shortcut">@binding.Shortcut</div>
                                            @*}*@
                                        </div>
                                    }

                                    @*@onclick= "@(() => Remove(key))"*@
                                }
                            </div>
                        }
                    </div>
                    @*</div>*@
                </div>
            }
        </div>
    }

</div>

@code {

    public string key = "bindings";
    protected override async Task OnInitializedAsync()
    {

        var bytes = await localStorage.GetItemAsync<byte[]>(key);

        if (bytes != null)
        {
            model.Output += "Generating list from session storage\n";
            this.StateHasChanged();

            await model.GenerateList(bytes);
            this.StateHasChanged();
        }
        else
        {
            model.Output += "no found file\n";
            this.StateHasChanged();
        }
    }

    public bool configure = true;
    public async Task Configure()
    {
        configure = !configure;
        this.StateHasChanged();
    }

    public bool SortByNameAscending = true;
    public bool SortByBindingAscending = true;

    public async Task SortByName(Scope scope)
    {
        var Scope = model.Scope.Single(x => x.Name == scope.Name);

        if (SortByNameAscending)
            Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.DisplayName).ToList();
        else
            Scope.Bindings = Scope.Bindings.OrderBy(x => x.DisplayName).ToList();

        SortByNameAscending = !SortByNameAscending;
        SortByBindingAscending = false;

        this.StateHasChanged();
    }

    public async Task SortByBinding(Scope scope)
    {
        var Scope = model.Scope.Single(x => x.Name == scope.Name);

        if (SortByBindingAscending)
            Scope.Bindings = Scope.Bindings.OrderByDescending(x => x.Shortcut).ToList();
        else
            Scope.Bindings = Scope.Bindings.OrderBy(x => x.Shortcut).ToList();

        SortByBindingAscending = !SortByBindingAscending;
        SortByNameAscending = false;

        this.StateHasChanged();
    }

    public async Task MoveUp(Scope scope)
    {
        var oldIndex = model.Scope.IndexOf(scope);

        model.Scope.RemoveAt(oldIndex);

        // the actual index could have shifted due to the removal

        model.Scope.Insert(--oldIndex, scope);

        this.StateHasChanged();
    }

    public async Task MoveDown(Scope scope)
    {
        var oldIndex = model.Scope.IndexOf(scope);

        model.Scope.RemoveAt(oldIndex);

        // the actual index could have shifted due to the removal

        model.Scope.Insert(++oldIndex, scope);

        this.StateHasChanged();
    }

    public async Task Toggle(Scope scope)
    {
        model.Scope.ForEach(x => x.Visible = false);
        scope.Visible = true;
        this.StateHasChanged();
    }

}
